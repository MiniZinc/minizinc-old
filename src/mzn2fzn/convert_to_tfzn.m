%-----------------------------------------------------------------------------%
% vim: ts=4 sw=4 et ft=mercury
%-----------------------------------------------------------------------------%
% Copyright (C) 2011 The University of Melbourne and NICTA.
% See the file COPYING for license information.
%-----------------------------------------------------------------------------%
%
% Author: zs.
%
% Code to convert the untyped representation of the FlatZinc model
% generated by the flatten package to the typed FlatZinc representation.
%
%-----------------------------------------------------------------------------%

:- module convert_to_tfzn.
:- interface.

:- import_module tfzn_ast.
:- import_module types.

:- import_module io.
:- import_module list.

:- pred convert_model_to_tfzn(string::in, predicate_map::in,
    global_var_map::in, list(var_id)::in,
    list(mzn_constraint)::in, mzn_solve_goal::in,
    tfzn::out, io::di, io::uo) is det.

%-----------------------------------------------------------------------------%

:- implementation.

:- import_module builtins.
:- import_module common_bounds.
:- import_module errors.
:- import_module global_vars.
:- import_module intset.
:- import_module zinc_ast.
:- import_module zinc_common.

:- import_module array.
:- import_module bool.
:- import_module map.
:- import_module maybe.
:- import_module pair.
:- import_module set.
:- import_module string.

convert_model_to_tfzn(ModelFileName, PredMap, GlobalVarMap, VarIds,
        Constraints, SolveGoal, TFzn, !IO) :-
    io.open_append("/home/workspaces/g6/g12/zinc/src/mzn2fzn/UNKNOWN", Res,
        !IO),
    ( if Res = ok(Stream) then
        UnknownStream = Stream
    else
        io.open_append("/dev/null", Res2, !IO),
        ( if Res2 = ok(Stream) then
            UnknownStream = Stream
        else
            unexpected("cannot open /dev/null")
        )
    ),
    io.format(UnknownStream, "MODEL %s\n", [s(ModelFileName)], !IO),

    map.foldl2(convert_pred_decl_to_tfzn(UnknownStream, GlobalVarMap), PredMap,
        [], RevPredDeclItems, !IO),
    list.foldl3(
        convert_par_or_var_decl_to_tfzn(UnknownStream, GlobalVarMap),
        VarIds, [], RevParDeclItems, [], RevVarDeclItems, !IO),
    list.map_foldl(convert_constraint_item_to_tfzn(UnknownStream),
        Constraints, ConstraintItems, !IO),
    convert_solve_item_to_tfzn(UnknownStream, SolveGoal, SolveItem, !IO),

    io.close_output(UnknownStream, !IO),

    list.reverse(RevPredDeclItems, PredDeclItems),
    list.reverse(RevParDeclItems, ParDeclItems),
    list.reverse(RevVarDeclItems, VarDeclItems),
    TFzn = tfzn(PredDeclItems, ParDeclItems, VarDeclItems,
        ConstraintItems, SolveItem).

%-----------------------------------------------------------------------------%

:- pred convert_pred_decl_to_tfzn(io.output_stream::in, global_var_map::in,
    pred_proc_id::in, predicate_info::in,
    list(tfzn_item_pred_decl)::in, list(tfzn_item_pred_decl)::out,
    io::di, io::uo) is det.

convert_pred_decl_to_tfzn(UnknownStream, GlobalVarMap, PredProcId, PredInfo,
        !RevPredDeclItems, !IO) :-
    PredProcId = pred_proc_id(PredName, _ProcNo),
    PredInfo = predicate_info(TIExprsAndIds, _Anns, MaybeBody),
    ( if
        MaybeBody = no,
        not is_builtin_operation(lang_flatzinc, PredName)
    then
        list.map_foldl(convert_pred_arg_to_tfzn(UnknownStream, GlobalVarMap),
            TIExprsAndIds, Args, !IO),
        PredDeclItem = tfzn_item_pred_decl(PredName, Args),
        !:RevPredDeclItems = [PredDeclItem | !.RevPredDeclItems]
    else
        true
    ).

:- pred convert_pred_arg_to_tfzn(io.output_stream::in, global_var_map::in,
    pair(ti_expr, id)::in, tfzn_pred_decl_arg::out, io::di, io::uo) is det.

convert_pred_arg_to_tfzn(UnknownStream, GlobalVarMap, TI - Id, Arg, !IO) :-
    convert_type_inst_to_tfzn(UnknownStream, GlobalVarMap, TI, TypeInst, !IO),
    Name = Id ^ id_name,
    Arg = tfzn_pred_decl_arg(Name, TypeInst).

:- pred convert_type_inst_to_tfzn(io.output_stream::in, global_var_map::in,
    ti_expr::in, tfzn_type_inst::out, io::di, io::uo) is det.

convert_type_inst_to_tfzn(UnknownStream, GlobalVarMap, TIExpr, TypeInst,
        !IO) :-
    TIExpr = ti_expr(RawTIExpr, _TIExprInfo),
    (
        RawTIExpr = constrained_raw_ti_expr(_, _, _),
        minizinc_internal_error([], $pred,
            "unexpected constrained_raw_ti_expr.\n")
    ;
        RawTIExpr = raw_ti_expr(VarPar0, BaseTIExprTail),
        (
            ( VarPar0 = none
            ; VarPar0 = par
            ),
            Inst0 = var_is_par
        ;
            VarPar0 = var,
            Inst0 = var_is_var
        ),
        (
            BaseTIExprTail = bte_bool,
            TypeInst = tfzn_type_inst(tt_bool, Inst0)
        ;
            BaseTIExprTail = bte_int,
            TypeInst = tfzn_type_inst(tt_int(int_range_unbounded), Inst0)
        ;
            BaseTIExprTail = bte_float,
            TypeInst = tfzn_type_inst(tt_float(float_range_unbounded), Inst0)
        ;
            BaseTIExprTail = bte_string,
            TypeInst = tfzn_type_inst(tt_string, Inst0)
        ;
            BaseTIExprTail = bte_range_expr_as_type_expr(LBExpr, UBExpr),
            % VarPar = VarPar0,
            % flatten_expr([], LBExpr, MZLB, !Env),
            % flatten_expr([], UBExpr, MZUB, !Env),
            ( if
                LBExpr = expr(lit(int(ILB)), _, _),
                UBExpr = expr(lit(int(IUB)), _, _)
            then
                Type = tt_int(int_range_lb_ub(ILB, IUB)),
                TypeInst = tfzn_type_inst(Type, Inst0)
            else if
                LBExpr = expr(lit(floatstr(FLBStr)), _, _),
                UBExpr = expr(lit(floatstr(FUBStr)), _, _)
            then
                FLB = string.det_to_float(FLBStr),
                FUB = string.det_to_float(FUBStr),
                Type = tt_float(float_range_lb_ub(FLB, FUB)),
                TypeInst = tfzn_type_inst(Type, Inst0)
            else
                io.write_string(UnknownStream, "TYPE RANGE_EXPR lb ", !IO),
                io.write(UnknownStream, LBExpr, !IO),
                io.write_string(UnknownStream, ", ub ", !IO),
                io.write(UnknownStream, UBExpr, !IO),
                io.nl(UnknownStream, !IO),
                TypeInst = tfzn_type_inst(tt_bool, Inst0)
                % minizinc_user_error([],
                %     "Only float and integer '..' ranges are permitted\n")
            )
        ;
            BaseTIExprTail = bte_array_of(IndexRangeTIExprs, ElemTIExpr, _),
            list.map_foldl(
                convert_index_range(UnknownStream, GlobalVarMap),
                IndexRangeTIExprs, IndexRanges, !IO),
            convert_type_inst_to_tfzn(UnknownStream, GlobalVarMap, ElemTIExpr,
                ElementTypeInst, !IO),
            ElementTypeInst = tfzn_type_inst(ElementType, ElementInst),
            (
                ElementType = tt_bool,
                Type = tt_bool_array(IndexRanges),
                TypeInst = tfzn_type_inst(Type, ElementInst)
            ;
                ElementType = tt_int(IntRange),
                Type = tt_int_array(IndexRanges, IntRange),
                TypeInst = tfzn_type_inst(Type, ElementInst)
            ;
                ElementType = tt_int_set(IntRange),
                Type = tt_int_set_array(IndexRanges, IntRange),
                TypeInst = tfzn_type_inst(Type, ElementInst)
            ;
                ElementType = tt_float(FloatRange),
                Type = tt_float_array(IndexRanges, FloatRange),
                TypeInst = tfzn_type_inst(Type, ElementInst)
            ;
                ( ElementType = tt_float_set(_FloatRange)
                ; ElementType = tt_string
                ),
                io.write_string(UnknownStream, "TYPE ARRAY ELEMENT ", !IO),
                io.write(UnknownStream, ElementType, !IO),
                io.nl(UnknownStream, !IO),
                TypeInst = tfzn_type_inst(tt_bool, Inst0)
            ;
                ( ElementType = tt_bool_array(_)
                ; ElementType = tt_int_array(__, _)
                ; ElementType = tt_int_set_array(_, _)
                ; ElementType = tt_float_array(_, _)
                ),
                minizinc_user_error([],
                    "Flatzinc does not support arrays of arrays.\n")
            )
        ;
            BaseTIExprTail = bte_ident(VarId),
            map.lookup(GlobalVarMap, VarId, VarInfo),
            MaybeVarValue = VarInfo ^ vi_value,
            ( if
                MaybeVarValue = yes(MZExpr),
                (
                    MZExpr = mzn_expr(float_set_expr(set_items(FSet)), _),
                    Type = tt_float(float_range_set(FSet))
                ;
                    MZExpr = mzn_expr(int_set_expr(set_items(ISet)), _),
                    Type = tt_int(int_range_set(intset.from_set(ISet)))
                )
            then
                TypeInst = tfzn_type_inst(Type, Inst0)
            else
                minizinc_user_error([], "'" ++ var_name(VarId) ++ "' " ++
                    "must be assigned a set of float\n" ++
                    "or set of int to be used as a type.\n")
            )
        ;
            BaseTIExprTail = bte_set_of(ElemTIExpr),
            io.write_string(UnknownStream, "TYPE SET_OF ", !IO),
            io.write(UnknownStream, ElemTIExpr, !IO),
            io.nl(UnknownStream, !IO),
            TypeInst = tfzn_type_inst(tt_bool, Inst0)
%           flatten_ti_expr([], ElemTIExpr, _VarPar, ElemMZType, _, !Env),
%           ( if
%               (
%                   ElemMZType = mzn_bool,
%                   MZType0 = mzn_bool_set
%               ;
%                   ElemMZType = mzn_float(FloatRange),
%                   MZType0 = mzn_float_set(FloatRange)
%               ;
%                   ElemMZType = mzn_int(IntRange),
%                   MZType0 = mzn_int_set(IntRange)
%               )
%           then
%               VarPar = VarPar0,
%               MZType = MZType0
%           else
%               minizinc_user_error([],
%                   "FlatZinc only supports set of bool, set of float, " ++
%                   "and set of int.\n")
%           )
        ;
            BaseTIExprTail = bte_set_expr_as_type_expr(ItemExprs),
            io.write_string(UnknownStream, "TYPE SET_AS_EXPR ", !IO),
            io.write(UnknownStream, ItemExprs, !IO),
            io.nl(UnknownStream, !IO),
            TypeInst = tfzn_type_inst(tt_bool, Inst0)
%           VarPar = VarPar0,
%           list.map_foldl(flatten_expr([]), ItemExprs, MZs, !Env),
%           (
%               MZs = [],
%               minizinc_user_error([],
%                   "Cannot use an empty set as a type.\n")
%           ;
%               MZs = [MZ | _],
%               ( if
%                   (
%                       MZ = mzn_expr(float_expr(_), _),
%                       minizinc_user_error([],
%                           "'{...}' is not supported as a float type.\n")
%                   ;
%                       MZ = mzn_expr(int_expr(_), _),
%                       P = ( pred(mzn_expr(int_expr(int_const(F)), _)::in,
%                           F::out) is semidet ),
%                       list.map(P, MZs, FXs),
%                       FSet = set.from_list(FXs),
%                       MZType0 = mzn_int(int_range_set(intset.from_set(FSet)))
%                   )
%               then
%                   MZType = MZType0
%               else
%                   minizinc_user_error([],
%                       "Not a well formed literal set of int or " ++
%                       "literal set of float.\n")
%               )
%           ),
%           IndexRanges = []
        ;
            BaseTIExprTail = bte_ann,
            io.write_string(UnknownStream, "TYPE ANN\n", !IO),
            TypeInst = tfzn_type_inst(tt_bool, Inst0)
        ;
            ( BaseTIExprTail = bte_typeinst_var(_)
            ; BaseTIExprTail = bte_any_typeinst_var(_)
            ; BaseTIExprTail = bte_tuple_of(_)
            ; BaseTIExprTail = bte_record_of(_)
            ; BaseTIExprTail = bte_op(_)
            ; BaseTIExprTail = bte_bottom
            ; BaseTIExprTail = bte_error
            ),
            minizinc_internal_error([], $pred, "expected a FlatZinc type.\n")
        )
    ).

:- pred convert_index_range(io.output_stream::in, global_var_map::in,
    ti_expr::in, index_range::out, io::di, io::uo) is det.

convert_index_range(UnknownStream, GlobalVarMap,
        TIExpr, IndexRange, !IO) :-
    convert_type_inst_to_tfzn(UnknownStream, GlobalVarMap, TIExpr, TypeInst,
        !IO),
    TypeInst = tfzn_type_inst(Type, Inst),
    ( if
        Inst = var_is_par,
        Type = tt_int(IntRange)
    then
        (
            IntRange = int_range_unbounded,
            % IndexRange = index_range(int_minus_infinity, int_plus_infinity)
            minizinc_user_error([], "Invalid index range.\n")
        ;
            IntRange = int_range_lb_ub(LB, UB),
            IndexRange = index_range(LB, UB)
        ;
            IntRange = int_range_set(Set),
            % JJJ FIXME - INTSET REP.
            IndexRange = set_to_index_range([], GlobalVarMap,
                set.from_sorted_list(intset.to_sorted_list(Set)))
        )
    else
        minizinc_user_error([], "Invalid index range.\n")
    ).

%-----------------------------------------------------------------------------%

:- pred convert_par_or_var_decl_to_tfzn(io.output_stream::in,
    global_var_map::in, var_id::in,
    list(tfzn_item_par_decl)::in, list(tfzn_item_par_decl)::out,
    list(tfzn_item_var_decl)::in, list(tfzn_item_var_decl)::out,
    io::di, io::uo) is det.

convert_par_or_var_decl_to_tfzn(UnknownStream, GlobalVarMap, VarId,
        !RevParDeclItems, !RevVarDeclItems, !IO) :-
    map.lookup(GlobalVarMap, VarId, VarInfo),
    MZType = var_get_updated_var_type(VarInfo),
    VarInst = VarInfo ^ vi_inst,
    IndexRanges = VarInfo ^ vi_index_ranges,
    MaybeValue = VarInfo ^ vi_value,
    (
        VarInst = var_is_par,
        (
            % We do not emit scalar parameters in FlatZinc.
            % XXX mzn2fzn currently inlines all uses of set of int parameters.
            % I think this a bad idea - juliensf.
            % I agree - zs.
            ( MZType = mzn_bool
            ; MZType = mzn_int(_)
            ; MZType = mzn_int_set(_)
            ; MZType = mzn_float(_)
            ),
            (
                IndexRanges = []
            ;
                IndexRanges = [_ | _],
                minizinc_internal_error([], $pred,
                    "Scalar parameter with index range")
            )
        ;
            ( MZType = mzn_bool_array
            ; MZType = mzn_int_array(_)
            ; MZType = mzn_int_set_array(_)
            ; MZType = mzn_float_array(_)
            ),
            (
                IndexRanges = [],
                minizinc_internal_error([], $pred,
                    "Array parameter with no index range")
            ;
                % If the original array was 2d, 3d, 4d etc, VarInfo will still
                % contain its original index ranges, rather than the index
                % range for the 1d array it has been flattened into.
                IndexRanges = [_ | _]
            ),
            (
                MaybeValue = yes(MZExpr),
                MZExpr = mzn_expr(RawMZExpr, MZAnns),
                (
                    MZType = mzn_bool_array,
                    ( if
                        set.empty(MZAnns),
                        RawMZExpr = bool_array_expr(ArrayExpr0),
                        deref_bool_array_param_assignment(GlobalVarMap,
                            ArrayExpr0, ArrayExpr),
                        ArrayExpr = array_items(ArrayIndexRanges, Array),
                        verify_index_range_size(ArrayIndexRanges, Array, _),
                        array.to_list(Array, List),
                        list.map(project_bool_expr_to_const, List, Bools)
                    then
                        TypeValue = tpv_bool_array(Bools)
                    else
                        TypeValue = tpv_bool_array([]),
                        io.write_string(UnknownStream,
                            "PAR VALUE BOOL_ARRAY ", !IO),
                        io.write(UnknownStream, MZExpr, !IO),
                        io.nl(UnknownStream, !IO)
                    )
                ;
                    MZType = mzn_int_array(_),
                    ( if
                        set.empty(MZAnns),
                        RawMZExpr = int_array_expr(ArrayExpr0),
                        deref_int_array_param_assignment(GlobalVarMap,
                            ArrayExpr0, ArrayExpr),
                        ArrayExpr = array_items(ArrayIndexRanges, Array),
                        verify_index_range_size(ArrayIndexRanges, Array, _),
                        array.to_list(Array, List),
                        list.map(project_int_expr_to_const, List, Ints)
                    then
                        TypeValue = tpv_int_array(Ints)
                    else
                        TypeValue = tpv_int_array([]),
                        io.write_string(UnknownStream,
                            "PAR VALUE INT_ARRAY ", !IO),
                        io.write(UnknownStream, MZExpr, !IO),
                        io.nl(UnknownStream, !IO)
                    )
                ;
                    MZType = mzn_int_set_array(_),
                    ( if
                        set.empty(MZAnns),
                        RawMZExpr = int_set_array_expr(ArrayExpr0),
                        deref_int_set_array_param_assignment(GlobalVarMap,
                            ArrayExpr0, ArrayExpr),
                        ArrayExpr = array_items(ArrayIndexRanges, Array),
                        verify_index_range_size(ArrayIndexRanges, Array, _),
                        array.to_list(Array, List),
                        list.map(project_int_set_expr_to_const, List, IntSets)
                    then
                        TypeValue = tpv_int_set_array(IntSets)
                    else
                        TypeValue = tpv_int_set_array([]),
                        io.write_string(UnknownStream,
                            "PAR VALUE INTSET_ARRAY ", !IO),
                        io.write(UnknownStream, MZExpr, !IO),
                        io.nl(UnknownStream, !IO)
                    )
                ;
                    MZType = mzn_float_array(_),
                    ( if
                        set.empty(MZAnns),
                        RawMZExpr = float_array_expr(ArrayExpr0),
                        deref_float_array_param_assignment(GlobalVarMap,
                            ArrayExpr0, ArrayExpr),
                        ArrayExpr = array_items(ArrayIndexRanges, Array),
                        verify_index_range_size(ArrayIndexRanges, Array, _),
                        array.to_list(Array, List),
                        list.map(project_float_expr_to_const, List, Floats)
                    then
                        TypeValue = tpv_float_array(Floats)
                    else
                        TypeValue = tpv_float_array([]),
                        io.write_string(UnknownStream,
                            "PAR VALUE FLOAT_ARRAY ", !IO),
                        io.write(UnknownStream, MZExpr, !IO),
                        io.nl(UnknownStream, !IO)
                    )
                ),
                VarName = var_name(VarId),
                ParDeclItem = tfzn_item_par_decl(VarName, TypeValue),
                !:RevParDeclItems = [ParDeclItem | !.RevParDeclItems]
            ;
                MaybeValue = no,
                minizinc_internal_error([], $pred,
                    "FlatZinc parameter with no assignment")
            )
        ;
            % Parameters of these types do not exist in FlatZinc.
            ( MZType = mzn_float_set(_)
            ; MZType = mzn_bool_set
            ; MZType = mzn_bool_set_array
            ; MZType = mzn_float_set_array(_)
            ; MZType = mzn_string
            ; MZType = mzn_string_array
            ; MZType = mzn_ann
            ; MZType = mzn_ann_array
            ; MZType = mzn_bottom
            ; MZType = mzn_bottom_array
            )
            % minizinc_internal_error([], $pred, "non-flatzinc type")
        )
    ;
        VarInst = var_is_var,
        VarName = var_name(VarId),
        (
            MZType = mzn_bool,
            (
                MaybeValue = yes(MZExpr),
                ( if
                    convert_mzn_bool_expr_to_tfzn_term(MZExpr, BoolTerm)
                then
                    MaybeTypeValue = yes(tftmv_bool(yes(BoolTerm)))
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE BOOL ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                MaybeTypeValue = yes(tftmv_bool(no))
            )
        ;
            MZType = mzn_int(IntValueRange),
            (
                MaybeValue = yes(MZExpr),
                ( if
                    convert_mzn_int_expr_to_tfzn_term(MZExpr, IntTerm)
                then
                    MaybeTypeValue = yes(tftmv_int(IntValueRange, yes(IntTerm)))
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE INT ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                MaybeTypeValue = yes(tftmv_int(IntValueRange, no))
            )
        ;
            MZType = mzn_int_set(IntSetValueRange),
            (
                MaybeValue = yes(MZExpr),
                ( if
                    convert_mzn_int_set_expr_to_tfzn_term(MZExpr, IntSetTerm)
                then
                    MaybeTypeValue = yes(tftmv_int_set(IntSetValueRange,
                        yes(IntSetTerm)))
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE INTSET ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                MaybeTypeValue = yes(tftmv_int_set(IntSetValueRange, no))
            )
        ;
            MZType = mzn_float(FloatValueRange),
            (
                MaybeValue = yes(MZExpr),
                ( if
                    convert_mzn_float_expr_to_tfzn_term(MZExpr, FloatTerm)
                then
                    MaybeTypeValue = yes(tftmv_float(FloatValueRange,
                        yes(FloatTerm)))
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE INT ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                MaybeTypeValue = yes(tftmv_float(FloatValueRange, no))
            )
        ;
            MZType = mzn_bool_array,
            (
                MaybeValue = yes(MZExpr),
                MZExpr = mzn_expr(RawMZExpr, MZAnns),
                ( if
                    set.empty(MZAnns),
                    RawMZExpr = bool_array_expr(ArrayExpr),
                    ArrayExpr = array_items(ArrayIndexRanges, Array),
                    verify_index_range_size(ArrayIndexRanges, Array, Size),
                    array.to_list(Array, List),
                    list.map(convert_bool_expr_to_tfzn_term, List, BoolTerms)
                then
                    MaybeTypeValue =
                        yes(tftmv_bool_array(Size, yes(BoolTerms)))
                else if
                    set.empty(MZAnns),
                    RawMZExpr = bool_array_expr(ArrayExpr),
                    ArrayExpr = array_var(_, _)
                then
                    % Aliases of arrays won't appear elsewhere in the model.
                    MaybeTypeValue = no
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE BOOL_ARRAY ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                ( if IndexRanges = [index_range(1, Size)] then
                    MaybeTypeValue = yes(tftmv_bool_array(Size, no))
                else
                    io.write_string(UnknownStream,
                        "VAR BOOL_ARRAY SIZE ", !IO),
                    io.write(UnknownStream, IndexRanges, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            )
        ;
            MZType = mzn_int_array(IntValueRange),
            (
                MaybeValue = yes(MZExpr),
                MZExpr = mzn_expr(RawMZExpr, MZAnns),
                ( if
                    set.empty(MZAnns),
                    RawMZExpr = int_array_expr(ArrayExpr),
                    ArrayExpr = array_items(ArrayIndexRanges, Array),
                    verify_index_range_size(ArrayIndexRanges, Array, Size),
                    array.to_list(Array, List),
                    list.map(convert_int_expr_to_tfzn_term, List, IntTerms)
                then
                    MaybeTypeValue = yes(tftmv_int_array(IntValueRange, Size,
                        yes(IntTerms)))
                else if
                    set.empty(MZAnns),
                    RawMZExpr = int_array_expr(ArrayExpr),
                    ArrayExpr = array_var(_, _)
                then
                    % Aliases of arrays won't appear elsewhere in the model.
                    MaybeTypeValue = no
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE INT_ARRAY ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                ( if IndexRanges = [index_range(1, Size)] then
                    MaybeTypeValue =
                        yes(tftmv_int_array(IntValueRange, Size, no))
                else
                    io.write_string(UnknownStream,
                        "VAR INT_ARRAY SIZE ", !IO),
                    io.write(UnknownStream, IndexRanges, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            )
        ;
            MZType = mzn_int_set_array(IntSetValueRange),
            (
                MaybeValue = yes(MZExpr),
                MZExpr = mzn_expr(RawMZExpr, MZAnns),
                ( if
                    set.empty(MZAnns),
                    RawMZExpr = int_set_array_expr(ArrayExpr),
                    ArrayExpr = array_items(ArrayIndexRanges, Array),
                    verify_index_range_size(ArrayIndexRanges, Array, Size),
                    array.to_list(Array, List),
                    list.map(convert_int_set_expr_to_tfzn_term, List,
                        IntSetTerms)
                then
                    MaybeTypeValue = yes(tftmv_int_set_array(IntSetValueRange,
                        Size, yes(IntSetTerms)))
                else if
                    set.empty(MZAnns),
                    RawMZExpr = int_set_array_expr(ArrayExpr),
                    ArrayExpr = array_var(_, _)
                then
                    % Aliases of arrays won't appear elsewhere in the model.
                    MaybeTypeValue = no
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE INTSET_ARRAY ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                ( if IndexRanges = [index_range(1, Size)] then
                    MaybeTypeValue =
                        yes(tftmv_int_set_array(IntSetValueRange, Size, no))
                else
                    io.write_string(UnknownStream,
                        "VAR INTSET_ARRAY SIZE ", !IO),
                    io.write(UnknownStream, IndexRanges, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            )
        ;
            MZType = mzn_float_array(FloatRange),
            (
                MaybeValue = yes(MZExpr),
                MZExpr = mzn_expr(RawMZExpr, MZAnns),
                ( if
                    set.empty(MZAnns),
                    RawMZExpr = float_array_expr(ArrayExpr),
                    ArrayExpr = array_items(ArrayIndexRanges, Array),
                    verify_index_range_size(ArrayIndexRanges, Array, Size),
                    array.to_list(Array, List),
                    list.map(convert_float_expr_to_tfzn_term, List, FloatTerms)
                then
                    MaybeTypeValue = yes(tftmv_float_array(FloatRange, Size,
                        yes(FloatTerms)))
                else if
                    set.empty(MZAnns),
                    RawMZExpr = float_array_expr(ArrayExpr),
                    ArrayExpr = array_var(_, _)
                then
                    % Aliases of arrays won't appear elsewhere in the model.
                    MaybeTypeValue = no
                else
                    io.write_string(UnknownStream,
                        "VAR VALUE FLOAT_ARRAY ", !IO),
                    io.write(UnknownStream, MZExpr, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            ;
                MaybeValue = no,
                ( if IndexRanges = [index_range(1, Size)] then
                    MaybeTypeValue =
                        yes(tftmv_float_array(FloatRange, Size, no))
                else
                    io.write_string(UnknownStream,
                        "VAR FLOAT_ARRAY SIZE ", !IO),
                    io.write(UnknownStream, IndexRanges, !IO),
                    io.nl(UnknownStream, !IO),
                    MaybeTypeValue = no
                )
            )
        ;
            % write_fzn_variable ignores variables of these types;
            % I (zs) think they should not occur at all.
            ( MZType = mzn_string
            ; MZType = mzn_string_array
            ; MZType = mzn_ann
            ; MZType = mzn_ann_array
            ),
            io.write_string(UnknownStream, "VAR TYPE ", !IO),
            io.write(UnknownStream, MZType, !IO),
            io.nl(UnknownStream, !IO),
            MaybeTypeValue = no
        ;
            % write_fzn_variable treats variables of these types as if
            % they were real; I (zs) think they should not occur at all.
            ( MZType = mzn_bool_set
            ; MZType = mzn_bool_set_array
            ; MZType = mzn_float_set(_)
            ; MZType = mzn_float_set_array(_)
            ; MZType = mzn_bottom
            ; MZType = mzn_bottom_array
            ),
            io.write_string(UnknownStream, "VAR TYPE ", !IO),
            io.write(UnknownStream, MZType, !IO),
            io.nl(UnknownStream, !IO),
            MaybeTypeValue = no
        ),
        (
            MaybeTypeValue = yes(VarTypeValue),
            get_var_output_anns(VarInfo, Anns),
            set.fold2(convert_var_decl_ann(UnknownStream), Anns,
                [], RevVarAnns, !IO),
            list.reverse(RevVarAnns, VarAnns),
            VarDeclItem = tfzn_item_var_decl(VarName, VarTypeValue, VarAnns),
            !:RevVarDeclItems = [VarDeclItem | !.RevVarDeclItems]
        ;
            MaybeTypeValue = no
        )
    ).

:- pred deref_bool_array_param_assignment(global_var_map::in,
    bool_array_expr::in, bool_array_expr::out) is det.

deref_bool_array_param_assignment(GlobalVarMap, ArrayExpr0, ArrayExpr) :-
    (
        ArrayExpr0 = array_items(_, _),
        ArrayExpr = ArrayExpr0
    ;
        ArrayExpr0 = array_var(_, VarId),
        map.lookup(GlobalVarMap, VarId, VarInfo),
        MaybeVarValue = VarInfo ^ vi_value,
        (
            MaybeVarValue = yes(MZExpr),
            MZExpr = mzn_expr(RawMZExpr, Anns),
            ( if RawMZExpr = bool_array_expr(NextArrayExpr) then
                ( if set.empty(Anns) then
                    deref_bool_array_param_assignment(GlobalVarMap,
                        NextArrayExpr, ArrayExpr)
                else
                    minizinc_internal_error([], $pred,
                        "FlatZinc parameter assignment with annotation")
                )
            else
                minizinc_internal_error([], $pred,
                    "FlatZinc parameter assigned value of the wrong type")
            )
        ;
            MaybeVarValue = no,
            minizinc_internal_error([], $pred,
                "FlatZinc parameter with no assignment")
        )
    ).

:- pred deref_int_array_param_assignment(global_var_map::in,
    int_array_expr::in, int_array_expr::out) is det.

deref_int_array_param_assignment(GlobalVarMap, ArrayExpr0, ArrayExpr) :-
    (
        ArrayExpr0 = array_items(_, _),
        ArrayExpr = ArrayExpr0
    ;
        ArrayExpr0 = array_var(_, VarId),
        map.lookup(GlobalVarMap, VarId, VarInfo),
        MaybeVarValue = VarInfo ^ vi_value,
        (
            MaybeVarValue = yes(MZExpr),
            MZExpr = mzn_expr(RawMZExpr, Anns),
            ( if RawMZExpr = int_array_expr(NextArrayExpr) then
                ( if set.empty(Anns) then
                    deref_int_array_param_assignment(GlobalVarMap,
                        NextArrayExpr, ArrayExpr)
                else
                    minizinc_internal_error([], $pred,
                        "FlatZinc parameter assignment with annotation")
                )
            else
                minizinc_internal_error([], $pred,
                    "FlatZinc parameter assigned value of the wrong type")
            )
        ;
            MaybeVarValue = no,
            minizinc_internal_error([], $pred,
                "FlatZinc parameter with no assignment")
        )
    ).

:- pred deref_int_set_array_param_assignment(global_var_map::in,
    int_set_array_expr::in, int_set_array_expr::out) is det.

deref_int_set_array_param_assignment(GlobalVarMap, ArrayExpr0, ArrayExpr) :-
    (
        ArrayExpr0 = array_items(_, _),
        ArrayExpr = ArrayExpr0
    ;
        ArrayExpr0 = array_var(_, VarId),
        map.lookup(GlobalVarMap, VarId, VarInfo),
        MaybeVarValue = VarInfo ^ vi_value,
        (
            MaybeVarValue = yes(MZExpr),
            MZExpr = mzn_expr(RawMZExpr, Anns),
            ( if RawMZExpr = int_set_array_expr(NextArrayExpr) then
                ( if set.empty(Anns) then
                    deref_int_set_array_param_assignment(GlobalVarMap,
                        NextArrayExpr, ArrayExpr)
                else
                    minizinc_internal_error([], $pred,
                        "FlatZinc parameter assignment with annotation")
                )
            else
                minizinc_internal_error([], $pred,
                    "FlatZinc parameter assigned value of the wrong type")
            )
        ;
            MaybeVarValue = no,
            minizinc_internal_error([], $pred,
                "FlatZinc parameter with no assignment")
        )
    ).

:- pred deref_float_array_param_assignment(global_var_map::in,
    float_array_expr::in, float_array_expr::out) is det.

deref_float_array_param_assignment(GlobalVarMap, ArrayExpr0, ArrayExpr) :-
    (
        ArrayExpr0 = array_items(_, _),
        ArrayExpr = ArrayExpr0
    ;
        ArrayExpr0 = array_var(_, VarId),
        map.lookup(GlobalVarMap, VarId, VarInfo),
        MaybeVarValue = VarInfo ^ vi_value,
        (
            MaybeVarValue = yes(MZExpr),
            MZExpr = mzn_expr(RawMZExpr, Anns),
            ( if RawMZExpr = float_array_expr(NextArrayExpr) then
                ( if set.empty(Anns) then
                    deref_float_array_param_assignment(GlobalVarMap,
                        NextArrayExpr, ArrayExpr)
                else
                    minizinc_internal_error([], $pred,
                        "FlatZinc parameter assignment with annotation")
                )
            else
                minizinc_internal_error([], $pred,
                    "FlatZinc parameter assigned value of the wrong type")
            )
        ;
            MaybeVarValue = no,
            minizinc_internal_error([], $pred,
                "FlatZinc parameter with no assignment")
        )
    ).

:- pred convert_var_decl_ann(io.output_stream::in, mzn_ann::in,
    list(tfzn_var_ann)::in, list(tfzn_var_ann)::out, io::di, io::uo) is det.

convert_var_decl_ann(UnknownStream, Ann, !RevTFznAnns, !IO) :-
    (
        Ann = mzn_ann(AnnName, AnnArgs),
        ( if
            convert_builtin_var_decl_ann(Ann, TFznAnn)
        then
            !:RevTFznAnns = [TFznAnn | !.RevTFznAnns]
        else if
            list.map(convert_mzn_expr_to_tfzn_ann_term,
                AnnArgs, ArgAnnTerms)
        then
            TFznAnn = var_ann_general(AnnName, ArgAnnTerms),
            !:RevTFznAnns = [TFznAnn | !.RevTFznAnns]
        else
            io.write_string(UnknownStream, "VAR ANN ", !IO),
            io.write(UnknownStream, Ann, !IO),
            io.nl(UnknownStream, !IO)
        )
    ;
        Ann = mzn_ann_var(_),
        io.write_string(UnknownStream, "VAR ANN ", !IO),
        io.write(UnknownStream, Ann, !IO),
        io.nl(UnknownStream, !IO)
    ).

:- pred convert_builtin_var_decl_ann(mzn_ann::in, tfzn_var_ann::out)
    is semidet.

convert_builtin_var_decl_ann(Ann, TFznAnn) :-
    Ann = mzn_ann(AnnName, AnnArgs),
    (
        AnnName = "is_defined_var",
        AnnArgs = [],
        TFznAnn = var_ann_is_defined_var
    ;
        AnnName = "var_is_introduced",
        AnnArgs = [],
        TFznAnn = var_ann_var_is_introduced
    ;
        AnnName = "output_var",
        AnnArgs = [],
        TFznAnn = var_ann_output_var
    ;
        AnnName = "output_array",
        AnnArgs = [AnnArg1],
        AnnArg1 = mzn_expr(RawAnnArg1, AnnArgAnn1),
        set.empty(AnnArgAnn1),
        RawAnnArg1 = int_set_array_expr(SetArrayExpr),
        SetArrayExpr = array_items(_IndexRanges, SetExprArray),
        array.to_list(SetExprArray, SetExprList),
        list.map(project_set_to_range, SetExprList, IndexRanges),
        TFznAnn = var_ann_output_array(IndexRanges)
    ).

:- pred project_set_to_items(int_set_expr::in, index_range::out) is semidet.

project_set_to_items(set_items(IntSet), IndexRange) :-
    set.to_sorted_list(IntSet, Ints),
    Ints = [Lo | _],
    list.last(Int, Hi),
    IndexRange = index_range(Lo, Hi).

%-----------------------------------------------------------------------------%

:- pred convert_constraint_item_to_tfzn(io.output_stream::in,
    mzn_constraint::in, tfzn_item_constraint::out, io::di, io::uo) is det.

convert_constraint_item_to_tfzn(UnknownStream, MznConstraint, ConstraintItem,
        !IO) :-
    MznConstraint = mzn_constraint(PredName, Args, Anns),
    ( if convert_constraint_to_tfzn(MznConstraint, TFznConstraintPrime) then
        TFznConstraint = TFznConstraintPrime
    else
        io.write_string(UnknownStream, "CONSTRAINT ", !IO),
        io.write_string(UnknownStream, PredName, !IO),
        io.write_string(UnknownStream, " ", !IO),
        io.write(UnknownStream, Args, !IO),
        io.nl(UnknownStream, !IO),
        TFznConstraint = tfzn_constr_user("dummy", [])
    ),
    ( if convert_constraint_anns_to_tfzn(Anns, TFznConstrAnnsPrime) then
        TFznConstrAnns = TFznConstrAnnsPrime
    else
        io.write_string(UnknownStream, "CONSTR_ANNOTATION ", !IO),
        io.write(UnknownStream, Anns, !IO),
        io.nl(UnknownStream, !IO),
        set.init(TFznConstrAnns)
    ),
    ConstraintItem = tfzn_item_constraint(TFznConstraint, TFznConstrAnns).

:- pred convert_solve_item_to_tfzn(io.output_stream::in,
    mzn_solve_goal::in, tfzn_item_solve::out, io::di, io::uo) is det.

convert_solve_item_to_tfzn(UnknownStream, Solve, SolveItem, !IO) :-
    Solve = mzn_solve_goal(Anns, Kind),
    ( if convert_solve_kind(Kind, SolveKindPrime) then
        SolveKind = SolveKindPrime
    else
        io.write_string(UnknownStream, "SOLVE_GOAL ", !IO),
        io.write(UnknownStream, Kind, !IO),
        io.nl(UnknownStream, !IO),
        SolveKind = tfzn_sk_satisfy
    ),
    ( if convert_solve_anns_to_tfzn(Anns, SolveAnnsPrime) then
        SolveAnns = SolveAnnsPrime
    else
        io.write_string(UnknownStream, "SOLVE_ANNOTATION ", !IO),
        io.write(UnknownStream, Anns, !IO),
        io.nl(UnknownStream, !IO),
        set.init(SolveAnns)
    ),
    SolveItem = tfzn_item_solve(SolveKind, SolveAnns).

%-----------------------------------------------------------------------------%

:- pred convert_constraint_anns_to_tfzn(mzn_anns::in,
    set(tfzn_constr_ann)::out) is semidet.

convert_constraint_anns_to_tfzn(AnnSet, TFznConstrAnnSet) :-
    Anns = set.to_sorted_list(AnnSet),
    list.map(convert_constraint_ann_to_tfzn, Anns, TFznConstrAnns),
    TFznConstrAnnSet = set.from_list(TFznConstrAnns).

:- pred convert_constraint_ann_to_tfzn(mzn_ann::in,
    tfzn_constr_ann::out) is semidet.

convert_constraint_ann_to_tfzn(Ann, TFznConstrAnn) :-
    Ann = mzn_ann(AnnName, AnnArgs), 
    ( if
        convert_builtin_constraint_ann_to_tfzn(Ann, TFznConstrAnnPrime)
    then
        TFznConstrAnn = TFznConstrAnnPrime
    else if
        list.map(convert_mzn_expr_to_tfzn_general_term, AnnArgs, ArgGenTerms)
    then
        TFznConstrAnn = constr_ann_general(AnnName, ArgGenTerms)
    else
        fail
        % io.write_string(UnknownStream, "CONSTRAINT_ANNOTATION ", !IO),
        % io.write(UnknownStream, Ann, !IO),
        % io.nl(UnknownStream, !IO)
    ).

:- pred convert_builtin_constraint_ann_to_tfzn(mzn_ann::in,
    tfzn_constr_ann::out) is semidet.

convert_builtin_constraint_ann_to_tfzn(Ann, TFznConstrAnn) :-
    Ann = mzn_ann(AnnName, MZExprs), 
    (
        AnnName = "defines_var",
        MZExprs = [MZExpr],
        MZExpr = mzn_expr(RawMZExpr, MZAnns),
        set.empty(MZAnns),
        (
            RawMZExpr = bool_expr(MZBoolExpr),
            project_bool_expr_to_var(MZBoolExpr, BoolVar)
        ->
            TFznConstrAnn = constr_ann_defines_var(def_bool_var(BoolVar))
        ;
            RawMZExpr = int_expr(MZIntExpr),
            project_int_expr_to_var(MZIntExpr, IntVar)
        ->
            TFznConstrAnn = constr_ann_defines_var(def_int_var(IntVar))
        ;
            RawMZExpr = int_set_expr(MZIntSetExpr),
            project_int_set_expr_to_var(MZIntSetExpr, IntSetVar)
        ->
            TFznConstrAnn = constr_ann_defines_var(def_int_set_var(IntSetVar))
        ;
            RawMZExpr = float_expr(MZFloatExpr),
            project_float_expr_to_var(MZFloatExpr, FloatVar)
        ->
            TFznConstrAnn = constr_ann_defines_var(def_float_var(FloatVar))
        ;
            fail
        )
    ;
        AnnName = "domain",
        MZExprs = [],
        TFznConstrAnn = constr_ann_domain_consistency
    ).

%-----------------------------------------------------------------------------%

:- pred convert_solve_anns_to_tfzn(mzn_anns::in,
    set(tfzn_solve_ann)::out) is semidet.

convert_solve_anns_to_tfzn(AnnSet, TFznSolveAnnSet) :-
    Anns = set.to_sorted_list(AnnSet),
    list.map(convert_solve_ann_to_tfzn, Anns, TFznSolveAnns),
    TFznSolveAnnSet = set.from_list(TFznSolveAnns).

:- pred convert_solve_ann_to_tfzn(mzn_ann::in, tfzn_solve_ann::out) is semidet.

convert_solve_ann_to_tfzn(mzn_ann(AnnName, MZExprs), TFznSolveAnn) :-
    (
        ( AnnName = "bool_search"
        ; AnnName = "int_search"
        ; AnnName = "set_search"
        ; AnnName = "seq_search"
        ),
        convert_search_params(AnnName, MZExprs, SearchParams),
        TFznSolveAnn = solve_ann_search(SearchParams)
    ;
        AnnName = "limit",
        convert_limit(AnnName, MZExprs, Limit, SearchParams),
        TFznSolveAnn = solve_ann_limit(Limit, SearchParams)
    ).

:- pred convert_search_params(string::in, list(mzn_expr)::in,
    tfzn_search_params::out) is semidet.

convert_search_params(AnnName, MZExprs, SearchParams) :-
    (
        (
            AnnName = "bool_search"
        ;
            AnnName = "int_search"
        ;
            AnnName = "set_search"
        ),
        MZExprs = [MZExpr1, MZExpr2, MZExpr3, MZExpr4],
        MZExpr1 = mzn_expr(_RawMZExpr1, MZAnns1),
        MZExpr2 = mzn_expr(RawMZExpr2, MZAnns2),
        MZExpr3 = mzn_expr(RawMZExpr3, MZAnns3),
        MZExpr4 = mzn_expr(RawMZExpr4, MZAnns4),
        set.empty(MZAnns1),
        set.empty(MZAnns2),
        set.empty(MZAnns3),
        set.empty(MZAnns4),

        RawMZExpr2 = ann_expr(mzn_ann(Ann2, [])),
        (
            Ann2 = "input_order",
            VarChoice = svc_input_order
        ;
            Ann2 = "smallest",
            VarChoice = svc_smallest
        ;
            Ann2 = "largest",
            VarChoice = svc_largest
        ;
            Ann2 = "occurrence",
            VarChoice = svc_occurrence
        ;
            Ann2 = "first_fail",
            VarChoice = svc_first_fail
        ;
            Ann2 = "anti_first_fail",
            VarChoice = svc_anti_first_fail
        ;
            Ann2 = "most_constrained",
            VarChoice = svc_most_constrained
        ;
            Ann2 = "max_regret",
            VarChoice = svc_anti_first_fail
        ),

        RawMZExpr3 = ann_expr(mzn_ann(Ann3, [])),
        (
            Ann3 = "indomain",
            Assignment = sa_indomain
        ;
            Ann3 = "indomain_min",
            Assignment = sa_indomain_min
        ;
            Ann3 = "indomain_max",
            Assignment = sa_indomain_max
        ;
            Ann3 = "indomain_median",
            Assignment = sa_indomain_median
        ;
            Ann3 = "indomain_middle",
            Assignment = sa_indomain_middle
        ;
            Ann3 = "indomain_split",
            Assignment = sa_indomain_split
        ;
            Ann3 = "indomain_reverse_split",
            Assignment = sa_indomain_reverse_split
        ;
            Ann3 = "indomain_interval",
            Assignment = sa_indomain_interval
        ;
            Ann3 = "indomain_random",
            Assignment = sa_indomain_random
        ),

        RawMZExpr4 = ann_expr(mzn_ann(Ann4, [])),
        (
            Ann4 = "complete",
            Strategy = ss_complete
        ),

        (
            AnnName = "bool_search",
            convert_mzn_bool_array_expr_to_tfzn_term(MZExpr1, BoolArrayTerm),
            SearchParams = bool_search(BoolArrayTerm, VarChoice, Assignment,
                Strategy)
        ;
            AnnName = "int_search",
            convert_mzn_int_array_expr_to_tfzn_term(MZExpr1, IntArrayTerm),
            SearchParams = int_search(IntArrayTerm, VarChoice, Assignment,
                Strategy)
        ;
            AnnName = "set_search",
            convert_mzn_int_set_array_expr_to_tfzn_term(MZExpr1,
                IntSetArrayTerm),
            SearchParams = set_search(IntSetArrayTerm, VarChoice, Assignment,
                Strategy)
        )
    ;
        AnnName = "seq_search",
        MZExprs = [MZExpr1],
        MZExpr1 = mzn_expr(RawMZExpr1, MZAnns1),
        set.empty(MZAnns1),
        RawMZExpr1 = ann_array_expr(array_items(IndexRange, ArgExprArray)),
        verify_index_range_array(IndexRange, ArgExprArray, _Size),
        array.to_list(ArgExprArray, ArgExprs),
        list.map(convert_search_params_ann, ArgExprs, SearchParamsList),
        SearchParams = seq_search(SearchParamsList)
    ).

:- pred convert_search_params_ann(mzn_ann::in, tfzn_search_params::out)
    is semidet.

convert_search_params_ann(MZAnn, SearchParams) :-
    MZAnn = mzn_ann(PredName, MZArgExprs),
    convert_search_params(PredName, MZArgExprs, SearchParams).

:- pred convert_limit(string::in, list(mzn_expr)::in,
    tfzn_limit::out, tfzn_search_params::out) is semidet.

convert_limit(AnnName, MZExprs, Limit, SearchParams) :-
    AnnName = "limit",
    MZExprs = [MZExpr1, MZExpr2, MZExpr3],
    MZExpr1 = mzn_expr(RawMZExpr1, MZAnns1),
    MZExpr2 = mzn_expr(_RawMZExpr2, MZAnns2),
    MZExpr3 = mzn_expr(RawMZExpr3, MZAnns3),
    set.empty(MZAnns1),
    set.empty(MZAnns2),
    set.empty(MZAnns3),

    convert_mzn_int_expr_to_tfzn_term(MZExpr2, IntTerm),

    RawMZExpr1 = ann_expr(mzn_ann(Ann1, [])),
    Ann1 = "time",
    Limit = time_limit(IntTerm),

    RawMZExpr3 = ann_expr(mzn_ann(SearchAnnName, SearchArgs)),
    convert_search_params(SearchAnnName, SearchArgs, SearchParams).

%-----------------------------------------------------------------------------%

:- pred convert_constraint_to_tfzn(mzn_constraint::in, tfzn_constraint::out)
    is semidet.

convert_constraint_to_tfzn(MznConstraint, TFznConstraint) :-
    ( if
        convert_builtin_constraint_to_tfzn(MznConstraint, TFznConstraintPrime)
    then
        TFznConstraint = TFznConstraintPrime
    else if
        convert_user_constraint_to_tfzn(MznConstraint, TFznConstraintPrime)
    then
        TFznConstraint = TFznConstraintPrime
    else
        fail
    ).

:- pred convert_builtin_constraint_to_tfzn(mzn_constraint::in,
    tfzn_constraint::out) is semidet.

convert_builtin_constraint_to_tfzn(MznConstraint, TFznConstraint) :-
    MznConstraint = mzn_constraint(PredName, Args, _Anns),
    (
        (
            PredName = "array_bool_and",
            Op = array_bool_and
        ;
            PredName = "array_bool_or",
            Op = array_bool_or
        ),
        Args = [L, R],
        convert_mzn_bool_array_expr_to_tfzn_term(L, TFL),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_array_bool(Op, TFL, TFR)
    ;
        (
            PredName = "array_bool_element",
            Op = array_bool_element
        ;
            PredName = "array_var_bool_element",
            Op = array_var_bool_element
        ),
        Args = [I, A, V],
        convert_mzn_int_expr_to_tfzn_term(I, TFI),
        convert_mzn_bool_array_expr_to_tfzn_term(A, TFA),
        convert_mzn_bool_expr_to_tfzn_term(V, TFV),
        TFznConstraint = tfzn_constr_array_bool_element(Op, TFI, TFA, TFV,
            hr_not_reified)
    ;
        (
            PredName = "array_int_element",
            Op = array_int_element
        ;
            PredName = "array_var_int_element",
            Op = array_var_int_element
        ),
        Args = [I, A, V],
        convert_mzn_int_expr_to_tfzn_term(I, TFI),
        convert_mzn_int_array_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_term(V, TFV),
        TFznConstraint = tfzn_constr_array_int_element(Op, TFI, TFA, TFV,
            hr_not_reified)
    ;
        (
            PredName = "array_set_element",
            % XXX element type
            Op = array_set_element
        ;
            PredName = "array_var_set_element",
            % XXX element type
            Op = array_var_set_element
        ),
        Args = [I, A, V],
        convert_mzn_int_expr_to_tfzn_term(I, TFI),
        convert_mzn_int_set_array_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_set_expr_to_tfzn_term(V, TFV),
        TFznConstraint = tfzn_constr_array_int_set_element(Op, TFI, TFA, TFV,
            hr_not_reified)
    ;
        (
            PredName = "bool2int",
            Op = bool_to_int
        ),
        Args = [A, R],
        convert_mzn_bool_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_var(R, TFR),
        TFznConstraint = tfzn_constr_bool_to_int(Op, TFA, TFR)
    ;
        (
            PredName = "int2float",
            Op = int_to_float
        ),
        Args = [A, R],
        convert_mzn_int_expr_to_tfzn_term(A, TFA),
        convert_mzn_float_expr_to_tfzn_var(R, TFR),
        TFznConstraint = tfzn_constr_int_to_float(Op, TFA, TFR)
    ;
        (
            PredName = "bool_not",
            Op = bool_not
        ),
        Args = [A, R],
        convert_mzn_bool_expr_to_tfzn_term(A, TFA),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_bool_arith_unop(Op, TFA, TFR)
    ;
        (
            PredName = "bool_xor",
            Op = bool_xor
        ),
        Args = [A, B, R],
        convert_mzn_bool_expr_to_tfzn_term(A, TFA),
        convert_mzn_bool_expr_to_tfzn_term(B, TFB),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_bool_arith_binop(Op, TFA, TFB, TFR)
    ;
        (
            PredName = "int_abs",
            Op = int_abs
        ;
            PredName = "int_negate",
            Op = int_negate
        ),
        Args = [A, R],
        convert_mzn_int_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_arith_unop(Op, TFA, TFR)
    ;
        (
            PredName = "int_plus",
            Op = int_plus
        ;
            PredName = "int_minus",
            Op = int_minus
        ;
            PredName = "int_times",
            Op = int_times
        ;
            PredName = "int_div",
            Op = int_div
        ;
            PredName = "int_mod",
            Op = int_mod
        ;
            PredName = "int_min",
            Op = int_min
        ;
            PredName = "int_max",
            Op = int_max
        ),
        Args = [A, B, R],
        convert_mzn_int_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_term(B, TFB),
        convert_mzn_int_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_arith_binop(Op, TFA, TFB, TFR)
    ;
        (
            PredName = "float_abs",
            Op = float_abs
        ;
            PredName = "float_negate",
            Op = float_negate
        ),
        Args = [A, R],
        convert_mzn_float_expr_to_tfzn_term(A, TFA),
        convert_mzn_float_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_float_arith_unop(Op, TFA, TFR)
    ;
        (
            PredName = "float_plus",
            Op = float_plus
        ;
            PredName = "float_minus",
            Op = float_minus
        ;
            PredName = "float_times",
            Op = float_times
        ;
            PredName = "float_div",
            Op = float_div
        ;
            PredName = "float_min",
            Op = float_min
        ;
            PredName = "float_max",
            Op = float_max
        ),
        Args = [A, B, R],
        convert_mzn_float_expr_to_tfzn_term(A, TFA),
        convert_mzn_float_expr_to_tfzn_term(B, TFB),
        convert_mzn_float_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_float_arith_binop(Op, TFA, TFB, TFR)
%   ;
%       (
%           PredName = "float_plus_reif",
%           Op = float_plus_reif
%       ;
%           PredName = "float_minus_reif",
%           Op = float_minus_reif
%       ;
%           PredName = "float_times_reif",
%           Op = float_times_reif
%       ;
%           PredName = "float_div_reif",
%           Op = float_div_reif
%       ;
%           PredName = "float_min_reif",
%           Op = float_min_reif
%       ;
%           PredName = "float_max_reif",
%           Op = float_max_reif
%       ),
%       Args = [A, B, C, R],
%       convert_mzn_float_expr_to_tfzn_term(A, TFA),
%       convert_mzn_float_expr_to_tfzn_term(B, TFB),
%       convert_mzn_float_expr_to_tfzn_term(C, TFC),
%       convert_mzn_bool_expr_to_tfzn_term(R, TFR),
%       TFznConstraint = tfzn_constr_reif_float_arith_binop(Op,
%           TFA, TFB, TFC, TFR)
    ;
        (
            PredName = "bool_eq",
            Op = bool_eq
        ;
            PredName = "bool_le",
            Op = bool_le
        ),
        Args = [A, B],
        convert_mzn_bool_expr_to_tfzn_term(A, TFA),
        convert_mzn_bool_expr_to_tfzn_term(B, TFB),
        TFznConstraint = tfzn_constr_bool_compare(Op, TFA, TFB, not_reified)
    ;
        (
            PredName = "bool_eq_reif",
            Op = bool_eq
        ;
            PredName = "bool_le_reif",
            Op = bool_le
        ),
        Args = [A, B, R],
        convert_mzn_bool_expr_to_tfzn_term(A, TFA),
        convert_mzn_bool_expr_to_tfzn_term(B, TFB),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_bool_compare(Op, TFA, TFB,
            fully_reified(TFR))
    ;
        (
            PredName = "set_eq",
            Op = set_eq
        ;
            PredName = "set_ne",
            Op = set_ne
        ;
            PredName = "set_le",
            Op = set_le
        ),
        Args = [A, B],
        convert_mzn_int_set_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_set_expr_to_tfzn_term(B, TFB),
        TFznConstraint = tfzn_constr_int_set_compare(Op, TFA, TFB)
    ;
        (
            PredName = "int_eq",
            Op = int_eq
        ;
            PredName = "int_ne",
            Op = int_ne
        ;
            PredName = "int_lt",
            Op = int_lt
        ;
            PredName = "int_le",
            Op = int_le
        ),
        Args = [A, B],
        convert_mzn_int_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_term(B, TFB),
        TFznConstraint = tfzn_constr_int_compare(Op, TFA, TFB, not_reified)
    ;
        (
            PredName = "int_eq_reif",
            Op = int_eq
        ;
            PredName = "int_ne_reif",
            Op = int_ne
        ;
            PredName = "int_lt_reif",
            Op = int_lt
        ;
            PredName = "int_le_reif",
            Op = int_le
        ),
        Args = [A, B, R],
        convert_mzn_int_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_expr_to_tfzn_term(B, TFB),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_compare(Op, TFA, TFB,
            fully_reified(TFR))
    ;
        (
            PredName = "float_eq_reif",
            Op = float_eq
        ;
            PredName = "float_ne_reif",
            Op = float_ne
        ;
            PredName = "float_lt_reif",
            Op = float_lt
        ;
            PredName = "float_le_reif",
            Op = float_le
        ),
        Args = [A, B, R],
        convert_mzn_float_expr_to_tfzn_term(A, TFA),
        convert_mzn_float_expr_to_tfzn_term(B, TFB),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_float_compare(Op, TFA, TFB,
            fully_reified(TFR))
    ;
        (
            PredName = "int_lin_eq",
            Op = int_lin_eq
        ;
            PredName = "int_lin_ne",
            Op = int_lin_ne
        ;
            PredName = "int_lin_le",
            Op = int_lin_le
        ),
        Args = [C, X, V],
        % XXX shouldn't X and C always be lists?
        convert_mzn_int_array_expr_to_tfzn_term(C, TFC),
        convert_mzn_int_array_expr_to_tfzn_term(X, TFX),
        convert_mzn_int_expr_to_tfzn_term(V, TFV),
        TFznConstraint = tfzn_constr_int_linear(Op, TFC, TFX, TFV, not_reified)
    ;
        (
            PredName = "float_lin_eq",
            Op = float_lin_eq
        ;
            PredName = "float_lin_ne",
            Op = float_lin_ne
        ;
            PredName = "float_lin_le",
            Op = float_lin_le
        ),
        Args = [C, X, V],
        % XXX shouldn't X and C always be lists?
        convert_mzn_float_array_expr_to_tfzn_term(C, TFC),
        convert_mzn_float_array_expr_to_tfzn_term(X, TFX),
        convert_mzn_float_expr_to_tfzn_term(V, TFV),
        TFznConstraint = tfzn_constr_float_linear(Op, TFC, TFX, TFV,
            not_reified)
    ;
        (
            PredName = "int_lin_eq_reif",
            Op = int_lin_eq
        ;
            PredName = "int_lin_ne_reif",
            Op = int_lin_ne
        ;
            PredName = "int_lin_le_reif",
            Op = int_lin_le
        ),
        Args = [C, X, V, R],
        % XXX shouldn't X and C always be lists?
        convert_mzn_int_array_expr_to_tfzn_term(C, TFC),
        convert_mzn_int_array_expr_to_tfzn_term(X, TFX),
        convert_mzn_int_expr_to_tfzn_term(V, TFV),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_linear(Op, TFC, TFX, TFV,
            fully_reified(TFR))
    ;
        (
            PredName = "float_lin_eq_reif",
            Op = float_lin_eq
        ;
            PredName = "float_lin_ne_reif",
            Op = float_lin_ne
        ;
            PredName = "float_lin_le_reif",
            Op = float_lin_le
        ),
        Args = [C, X, V, R],
        % XXX shouldn't X and C always be lists?
        convert_mzn_float_array_expr_to_tfzn_term(C, TFC),
        convert_mzn_float_array_expr_to_tfzn_term(X, TFX),
        convert_mzn_float_expr_to_tfzn_term(V, TFV),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_float_linear(Op, TFC, TFX, TFV,
            fully_reified(TFR))
    ;
        (
            PredName = "set_in",
            Op = set_in
        ),
        Args = [I, S],
        convert_mzn_int_expr_to_tfzn_term(I, TFI),
        convert_mzn_int_set_expr_to_tfzn_term(S, TFS),
        TFznConstraint = tfzn_constr_int_set_in(Op, TFI, TFS, not_reified)
    ;
        (
            PredName = "set_in_reif",
            Op = set_in
        ),
        Args = [I, S, R],
        convert_mzn_int_expr_to_tfzn_term(I, TFI),
        convert_mzn_int_set_expr_to_tfzn_term(S, TFS),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_set_in(Op, TFI, TFS,
            fully_reified(TFR))
    ;
        (
            PredName = "set_card",
            Op = set_card
        ),
        Args = [S, C],
        convert_mzn_int_set_expr_to_tfzn_term(S, TFS),
        convert_mzn_int_expr_to_tfzn_term(C, TFC),
        TFznConstraint = tfzn_constr_int_set_card(Op, TFS, TFC)
    ;
        (
            PredName = "set_subset",
            Op = set_subset
        ),
        Args = [A, B],
        convert_mzn_int_set_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_set_expr_to_tfzn_term(B, TFB),
        TFznConstraint = tfzn_constr_int_set_subset(Op, TFA, TFB, not_reified)
    ;
        (
            PredName = "set_subset_reif",
            Op = set_subset
        ),
        Args = [A, B, R],
        convert_mzn_int_set_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_set_expr_to_tfzn_term(B, TFB),
        convert_mzn_bool_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_set_subset(Op, TFA, TFB,
            fully_reified(TFR))
    ;
        (
            PredName = "set_intersect",
            Op = set_intersect
        ;
            PredName = "set_union",
            Op = set_union
        ;
            PredName = "set_diff",
            Op = set_diff
        ),
        Args = [A, B, R],
        convert_mzn_int_set_expr_to_tfzn_term(A, TFA),
        convert_mzn_int_set_expr_to_tfzn_term(B, TFB),
        convert_mzn_int_set_expr_to_tfzn_term(R, TFR),
        TFznConstraint = tfzn_constr_int_set_set_op(Op, TFA, TFB, TFR)
%   ;
%       (
%           PredName = "g12fd_int_all_different",
%           Op = g12fd_int_all_different
%       ;
%           PredName = "g12lazy_int_all_different",
%           Op = g12lazy_int_all_different
%       ),
%       Args = [A],
%       convert_mzn_int_array_expr_to_tfzn_term(A, TFA),
%       TFznConstraint = tfzn_constr_int_all_different(Op, TFA)
%   ;
%       (
%           PredName = "g12fd_cumulative",
%           Op = g12fd_cumulative
%       ),
%       Args = [A, B, C, D],
%       convert_mzn_int_array_expr_to_tfzn_term(A, TFA),
%       convert_mzn_int_array_expr_to_tfzn_term(B, TFB),
%       convert_mzn_int_array_expr_to_tfzn_term(C, TFC),
%       convert_mzn_int_expr_to_tfzn_term(D, TFD),
%       TFznConstraint = tfzn_constr_cumulative(Op, TFA, TFB, TFC, TFD)
%   ;
%       (
%           PredName = "g12fd_global_cardinality_open",
%           Op = g12fd_global_cardinality_open
%       ),
%       Args = [A, B, C, D],
%       convert_mzn_int_array_expr_to_tfzn_var(A, TFA),
%       convert_mzn_int_array_expr_to_tfzn_term(B, TFB),
%       convert_mzn_int_array_expr_to_tfzn_term(C, TFC),
%       convert_mzn_int_array_expr_to_tfzn_term(D, TFD),
%       TFznConstraint = tfzn_constr_global_card_open(Op, TFA, TFB, TFC, TFD)
    ).

:- pred convert_user_constraint_to_tfzn(mzn_constraint::in,
    tfzn_constraint::out) is semidet.

convert_user_constraint_to_tfzn(MznConstraint, TFznConstraint) :-
    MznConstraint = mzn_constraint(PredName, MZExprs, _Anns),
    list.map(convert_mzn_expr_to_tfzn_general_term, MZExprs, GenTerms),
    TFznConstraint = tfzn_constr_user(PredName, GenTerms).

:- pred convert_mzn_expr_to_tfzn_general_term(mzn_expr::in,
    tfzn_general_term::out) is semidet.

convert_mzn_expr_to_tfzn_general_term(MZExpr, GenTerm) :-
    ( if convert_mzn_bool_expr_to_tfzn_term(MZExpr, BoolTerm) then
        GenTerm = tfzn_gen_term_bool(BoolTerm)
    else if convert_mzn_bool_array_expr_to_tfzn_term(MZExpr, BoolArrayTerm) then
        GenTerm = tfzn_gen_term_bool_array(BoolArrayTerm)
    else if convert_mzn_int_expr_to_tfzn_term(MZExpr, IntTerm) then
        GenTerm = tfzn_gen_term_int(IntTerm)
    else if convert_mzn_int_array_expr_to_tfzn_term(MZExpr, IntArrayTerm) then
        GenTerm = tfzn_gen_term_int_array(IntArrayTerm)
    else if convert_mzn_int_set_expr_to_tfzn_term(MZExpr, IntSetTerm) then
        GenTerm = tfzn_gen_term_int_set(IntSetTerm)
    else if convert_mzn_int_set_array_expr_to_tfzn_term(MZExpr, ISArrayTerm) then
        GenTerm = tfzn_gen_term_int_set_array(ISArrayTerm)

    else if convert_mzn_float_expr_to_tfzn_term(MZExpr, FloatTerm) then
        GenTerm = tfzn_gen_term_float(FloatTerm)
    else if convert_mzn_float_array_expr_to_tfzn_term(MZExpr, FloatArrayTerm) then
        GenTerm = tfzn_gen_term_float_array(FloatArrayTerm)
    else if convert_mzn_float_set_expr_to_tfzn_term(MZExpr, FloatSetTerm) then
        GenTerm = tfzn_gen_term_float_set(FloatSetTerm)
%   else if convert_mzn_int_set_array_expr_to_tfzn_term(MZExpr, FSArrayTerm) then
%       GenTerm = tfzn_gen_term_float_set_array(FSArrayTerm)
    else if convert_string_expr_to_tfzn_term(MZExpr, StringTerm) then
        GenTerm = tfzn_gen_term_string(StringTerm)
    else
        fail
    ).

:- pred convert_mzn_expr_to_tfzn_ann_term(mzn_expr::in, tfzn_ann_term::out)
    is semidet.

convert_mzn_expr_to_tfzn_ann_term(MZExpr, AnnTerm) :-
    ( if
        convert_mzn_expr_to_tfzn_general_term(MZExpr, GeneralTerm)
    then
        AnnTerm = tfzn_ann_term_general(GeneralTerm)
    else if
        MZExpr = mzn_expr(RawMZExpr, MZAnns),
        set.empty(MZAnns),
        RawMZExpr = ann_expr(MZAnn),
        convert_ann_to_tfzn_ann_term(MZAnn, AnnTermPrime)
    then
        AnnTerm = AnnTermPrime
    else if
        MZExpr = mzn_expr(RawMZExpr, MZAnns),
        set.empty(MZAnns),
        RawMZExpr = ann_array_expr(ArrayExpr),
        ArrayExpr = array_items(IndexRanges, AnnMZArray),
        verify_index_range_size(IndexRanges, AnnMZArray, _Size),
        array.to_list(AnnMZArray, AnnMZs),
        list.map(convert_ann_to_tfzn_ann_term, AnnMZs, Anns)
    then
        AnnTerm = tfzn_ann_term_ann_array(Anns)
    else
        fail
    ).

:- pred convert_ann_to_tfzn_ann_term(mzn_ann::in, tfzn_ann_term::out)
    is semidet.

convert_ann_to_tfzn_ann_term(MZAnn, AnnTerm) :-
    ( if
        MZAnn = mzn_ann(AnnName, AnnMZArgs),
        list.map(convert_mzn_expr_to_tfzn_ann_term, AnnMZArgs, AnnArgs)
    then
        AnnTerm = tfzn_ann_term_ann(AnnName, AnnArgs)
    else
        fail
    ).

%-----------------------------------------------------------------------------%

:- pred convert_mzn_bool_expr_to_tfzn_var(mzn_expr::in, tfzn_bool_var::out)
    is semidet.

convert_mzn_bool_expr_to_tfzn_var(MZExpr, BoolVar) :-
    convert_mzn_bool_expr_to_tfzn_term(MZExpr, BoolTerm),
    BoolTerm = tfzn_bool_term_var(BoolVar).

:- pred convert_mzn_bool_expr_to_tfzn_term(mzn_expr::in, tfzn_bool_term::out)
    is semidet.

convert_mzn_bool_expr_to_tfzn_term(MZExpr, BoolTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = bool_expr(MZBoolExpr),
    convert_bool_expr_to_tfzn_term(MZBoolExpr, BoolTerm).

:- pred convert_bool_expr_to_tfzn_term(bool_expr::in, tfzn_bool_term::out)
    is semidet.

convert_bool_expr_to_tfzn_term(MZBoolExpr, BoolTerm) :-
    (
        MZBoolExpr = bool_const(BoolConst),
        BoolTerm = tfzn_bool_term_const(BoolConst)
    ;
        MZBoolExpr = bool_var(var_no_index(VarId)),
        VarName = var_name(VarId),
        BoolVar = tfzn_bool_var_named(VarName),
        BoolTerm = tfzn_bool_term_var(BoolVar)
    ;
        MZBoolExpr = bool_var(var_index(VarId, Index)),
        VarName = var_name(VarId),
        BoolArrayVar = tfzn_bool_array_var_named(VarName),
        BoolVar = tfzn_bool_var_array_slot(BoolArrayVar, Index),
        BoolTerm = tfzn_bool_term_var(BoolVar)
    ).

:- pred convert_mzn_bool_array_expr_to_tfzn_var(mzn_expr::in,
    tfzn_bool_array_var::out) is semidet.

convert_mzn_bool_array_expr_to_tfzn_var(MZExpr, BoolArrayVar) :-
    convert_mzn_bool_array_expr_to_tfzn_term(MZExpr, BoolArrayTerm),
    BoolArrayTerm = tfzn_bool_array_term_var(BoolArrayVar).

:- pred convert_mzn_bool_array_expr_to_tfzn_term(mzn_expr::in,
    tfzn_bool_array_term::out) is semidet.

convert_mzn_bool_array_expr_to_tfzn_term(MZExpr, BoolArrayTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = bool_array_expr(BoolArrayExpr),
    convert_bool_array_expr_to_tfzn_term(BoolArrayExpr, BoolArrayTerm).

:- pred convert_bool_array_expr_to_tfzn_term(bool_array_expr::in,
    tfzn_bool_array_term::out) is semidet.

convert_bool_array_expr_to_tfzn_term(BoolArrayExpr, BoolArrayTerm) :-
    (
        BoolArrayExpr = array_items(IndexRanges, BoolArray),
        verify_index_range_array(IndexRanges, BoolArray, _Size),
        array.to_list(BoolArray, BoolExprs),
        (
            BoolExprs = [],
            BoolArrayTerm = tfzn_bool_array_term_consts([])
        ;
            BoolExprs = [FirstBoolExpr | _],
            (
                FirstBoolExpr = bool_const(_),
                list.map(project_bool_expr_to_const, BoolExprs, Bools)
            ->
                BoolArrayTerm = tfzn_bool_array_term_consts(Bools)
            ;
                FirstBoolExpr = bool_var(_),
                list.map(project_bool_expr_to_var, BoolExprs, BoolVars)
            ->
                BoolArrayTerm = tfzn_bool_array_term_vars(BoolVars)
            ;
                list.map(project_bool_expr_to_term, BoolExprs, BoolTerms)
            ->
                BoolArrayTerm = tfzn_bool_array_term_terms(BoolTerms)
            ;
                fail
            )
        )
    ;
        BoolArrayExpr = array_var(_IndexRanges, VarId),
        VarName = var_name(VarId),
        BoolArrayVar = tfzn_bool_array_var_named(VarName),
        BoolArrayTerm = tfzn_bool_array_term_var(BoolArrayVar)
    ).

%-----------------------------------------------------------------------------%

:- pred convert_mzn_int_expr_to_tfzn_var(mzn_expr::in, tfzn_int_var::out)
    is semidet.

convert_mzn_int_expr_to_tfzn_var(MZExpr, IntVar) :-
    convert_mzn_int_expr_to_tfzn_term(MZExpr, IntTerm),
    IntTerm = tfzn_int_term_var(IntVar).

:- pred convert_mzn_int_expr_to_tfzn_term(mzn_expr::in, tfzn_int_term::out)
    is semidet.

convert_mzn_int_expr_to_tfzn_term(MZExpr, IntTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = int_expr(MZIntExpr),
    convert_int_expr_to_tfzn_term(MZIntExpr, IntTerm).

:- pred convert_int_expr_to_tfzn_term(int_expr::in, tfzn_int_term::out)
    is semidet.

convert_int_expr_to_tfzn_term(MZIntExpr, IntTerm) :-
    (
        MZIntExpr = int_const(IntConst),
        IntTerm = tfzn_int_term_const(IntConst)
    ;
        MZIntExpr = int_var(var_no_index(VarId)),
        VarName = var_name(VarId),
        IntVar = tfzn_int_var_named(VarName),
        IntTerm = tfzn_int_term_var(IntVar)
    ;
        MZIntExpr = int_var(var_index(VarId, Index)),
        VarName = var_name(VarId),
        IntArrayVar = tfzn_int_array_var_named(VarName),
        IntVar = tfzn_int_var_array_slot(IntArrayVar, Index),
        IntTerm = tfzn_int_term_var(IntVar)
    ).

:- pred convert_mzn_int_set_expr_to_tfzn_var(mzn_expr::in,
    tfzn_int_set_var::out) is semidet.

convert_mzn_int_set_expr_to_tfzn_var(MZExpr, IntSetVar) :-
    convert_mzn_int_set_expr_to_tfzn_term(MZExpr, IntSetTerm),
    IntSetTerm = tfzn_int_set_term_var(IntSetVar).

:- pred convert_mzn_int_set_expr_to_tfzn_term(mzn_expr::in,
    tfzn_int_set_term::out) is semidet.

convert_mzn_int_set_expr_to_tfzn_term(MZExpr, IntSetTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = int_set_expr(IntSetExpr),
    convert_int_set_expr_to_tfzn_term(IntSetExpr, IntSetTerm).

:- pred convert_int_set_expr_to_tfzn_term(int_set_expr::in,
    tfzn_int_set_term::out) is det.

convert_int_set_expr_to_tfzn_term(IntSetExpr, IntSetTerm) :-
    (
        IntSetExpr = set_items(IntSet),
        IntSetTerm = tfzn_int_set_term_const(IntSet)
    ;
        IntSetExpr = set_var(var_no_index(VarId)),
        VarName = var_name(VarId),
        IntSetTerm = tfzn_int_set_term_var(tfzn_int_set_var_named(VarName))
    ;
        IntSetExpr = set_var(var_index(VarId, Index)),
        VarName = var_name(VarId),
        IntSetArrayVar = tfzn_int_set_array_var_named(VarName),
        IntSetVar = tfzn_int_set_var_array_slot(IntSetArrayVar, Index),
        IntSetTerm = tfzn_int_set_term_var(IntSetVar)
    ).

:- pred convert_mzn_int_array_expr_to_tfzn_var(mzn_expr::in,
    tfzn_int_array_var::out) is semidet.

convert_mzn_int_array_expr_to_tfzn_var(MZExpr, IntArrayVar) :-
    convert_mzn_int_array_expr_to_tfzn_term(MZExpr, IntArrayTerm),
    IntArrayTerm = tfzn_int_array_term_var(IntArrayVar).

:- pred convert_mzn_int_array_expr_to_tfzn_term(mzn_expr::in,
    tfzn_int_array_term::out) is semidet.

convert_mzn_int_array_expr_to_tfzn_term(MZExpr, IntArrayTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = int_array_expr(IntArrayExpr),
    convert_int_array_expr_to_tfzn_term(IntArrayExpr, IntArrayTerm).

:- pred convert_int_array_expr_to_tfzn_term(int_array_expr::in,
    tfzn_int_array_term::out) is semidet.

convert_int_array_expr_to_tfzn_term(IntArrayExpr, IntArrayTerm) :-
    (
        IntArrayExpr = array_items(IndexRanges, IntArray),
        verify_index_range_array(IndexRanges, IntArray, _Size),
        array.to_list(IntArray, IntExprs),
        (
            IntExprs = [],
            IntArrayTerm = tfzn_int_array_term_consts([])
        ;
            IntExprs = [FirstIntExpr | _],
            (
                FirstIntExpr = int_const(_),
                list.map(project_int_expr_to_const, IntExprs, Ints)
            ->
                IntArrayTerm = tfzn_int_array_term_consts(Ints)
            ;
                FirstIntExpr = int_var(_),
                list.map(project_int_expr_to_var, IntExprs, IntVars)
            ->
                IntArrayTerm = tfzn_int_array_term_vars(IntVars)
            ;
                list.map(project_int_expr_to_term, IntExprs, IntTerms)
            ->
                IntArrayTerm = tfzn_int_array_term_terms(IntTerms)
            ;
                fail
            )
        )
    ;
        IntArrayExpr = array_var(_IndexRanges, VarId),
        VarName = var_name(VarId),
        IntArrayVar = tfzn_int_array_var_named(VarName),
        IntArrayTerm = tfzn_int_array_term_var(IntArrayVar)
    ).

:- pred convert_mzn_int_set_array_expr_to_tfzn_term(mzn_expr::in,
    tfzn_int_set_array_term::out) is semidet.

convert_mzn_int_set_array_expr_to_tfzn_term(MZExpr, IntSetArrayTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = int_set_array_expr(IntSetArrayExpr),
    convert_int_set_array_expr_to_tfzn_term(IntSetArrayExpr, IntSetArrayTerm).

:- pred convert_int_set_array_expr_to_tfzn_term(int_set_array_expr::in,
    tfzn_int_set_array_term::out) is semidet.

convert_int_set_array_expr_to_tfzn_term(IntSetArrayExpr, IntSetArrayTerm) :-
    (
        IntSetArrayExpr = array_items(IndexRanges, IntSetArray),
        verify_index_range_array(IndexRanges, IntSetArray, _Size),
        array.to_list(IntSetArray, IntSetExprs),
        (
            IntSetExprs = [],
            IntSetArrayTerm = tfzn_int_set_array_term_consts([])
        ;
            IntSetExprs = [FirstIntSetExpr | _],
            (
                FirstIntSetExpr = set_items(_),
                list.map(project_int_set_expr_to_const, IntSetExprs, IntSets)
            ->
                IntSetArrayTerm = tfzn_int_set_array_term_consts(IntSets)
            ;
                FirstIntSetExpr = set_var(_),
                list.map(project_int_set_expr_to_var, IntSetExprs, IntSetVars)
            ->
                IntSetArrayTerm = tfzn_int_set_array_term_vars(IntSetVars)
            ;
                list.map(project_int_set_expr_to_term, IntSetExprs,
                    IntSetTerms),
                IntSetArrayTerm = tfzn_int_set_array_term_terms(IntSetTerms)
            )
        )
    ;
        IntSetArrayExpr = array_var(_IndexRanges, VarId),
        VarName = var_name(VarId),
        IntSetArrayVar = tfzn_int_set_array_var_named(VarName),
        IntSetArrayTerm = tfzn_int_set_array_term_var(IntSetArrayVar)
    ).

%-----------------------------------------------------------------------------%

:- pred convert_mzn_float_expr_to_tfzn_var(mzn_expr::in, tfzn_float_var::out)
    is semidet.

convert_mzn_float_expr_to_tfzn_var(MZExpr, FloatVar) :-
    convert_mzn_float_expr_to_tfzn_term(MZExpr, FloatTerm),
    FloatTerm = tfzn_float_term_var(FloatVar).

:- pred convert_mzn_float_expr_to_tfzn_term(mzn_expr::in, tfzn_float_term::out)
    is semidet.

convert_mzn_float_expr_to_tfzn_term(MZExpr, FloatTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = float_expr(FloatExpr),
    convert_float_expr_to_tfzn_term(FloatExpr, FloatTerm).

:- pred convert_float_expr_to_tfzn_term(float_expr::in, tfzn_float_term::out)
    is semidet.

convert_float_expr_to_tfzn_term(FloatExpr, FloatTerm) :-
    (
        FloatExpr = float_const(FloatConst),
        FloatTerm = tfzn_float_term_const(FloatConst)
    ;
        FloatExpr = float_var(var_no_index(VarId)),
        VarName = var_name(VarId),
        FloatVar = tfzn_float_var_named(VarName),
        FloatTerm = tfzn_float_term_var(FloatVar)
    ;
        FloatExpr = float_var(var_index(VarId, Index)),
        VarName = var_name(VarId),
        FloatArrayVar = tfzn_float_array_var_named(VarName),
        FloatVar = tfzn_float_var_array_slot(FloatArrayVar, Index),
        FloatTerm = tfzn_float_term_var(FloatVar)
    ).

:- pred convert_mzn_float_set_expr_to_tfzn_var(mzn_expr::in,
    tfzn_float_set_var::out) is semidet.

convert_mzn_float_set_expr_to_tfzn_var(MZExpr, FloatSetVar) :-
    convert_mzn_float_set_expr_to_tfzn_term(MZExpr, FloatSetTerm),
    FloatSetTerm = tfzn_float_set_term_var(FloatSetVar).

:- pred convert_mzn_float_set_expr_to_tfzn_term(mzn_expr::in,
    tfzn_float_set_term::out) is semidet.

convert_mzn_float_set_expr_to_tfzn_term(MZExpr, FloatSetTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = float_set_expr(FloatSetExpr),
    convert_float_set_expr_to_tfzn_term(FloatSetExpr, FloatSetTerm).

:- pred convert_float_set_expr_to_tfzn_term(float_set_expr::in,
    tfzn_float_set_term::out) is semidet.

convert_float_set_expr_to_tfzn_term(FloatSetExpr, FloatSetTerm) :-
    % XXX Do we need array accesses for float sets?
    (
        FloatSetExpr = set_items(FloatSet),
        FloatSetTerm = tfzn_float_set_term_const(FloatSet)
    ;
        FloatSetExpr = set_var(var_no_index(VarId)),
        VarName = var_name(VarId),
        FloatSetVar = tfzn_float_set_var_named(VarName),
        FloatSetTerm = tfzn_float_set_term_var(FloatSetVar)
    ).

:- pred convert_mzn_float_array_expr_to_tfzn_var(mzn_expr::in,
    tfzn_float_array_var::out) is semidet.

convert_mzn_float_array_expr_to_tfzn_var(MZExpr, FloatArrayVar) :-
    convert_mzn_float_array_expr_to_tfzn_term(MZExpr, FloatArrayTerm),
    FloatArrayTerm = tfzn_float_array_term_var(FloatArrayVar).

:- pred convert_mzn_float_array_expr_to_tfzn_term(mzn_expr::in,
    tfzn_float_array_term::out) is semidet.

convert_mzn_float_array_expr_to_tfzn_term(MZExpr, FloatArrayTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = float_array_expr(FloatArrayExpr),
    (
        FloatArrayExpr = array_items(IndexRanges, FloatArray),
        verify_index_range_array(IndexRanges, FloatArray, _Size),
        array.to_list(FloatArray, FloatExprs),
        (
            FloatExprs = [],
            FloatArrayTerm = tfzn_float_array_term_consts([])
        ;
            FloatExprs = [FirstFloatExpr | _],
            (
                FirstFloatExpr = float_const(_),
                list.map(project_float_expr_to_const, FloatExprs, Floats)
            ->
                FloatArrayTerm = tfzn_float_array_term_consts(Floats)
            ;
                FirstFloatExpr = float_var(_),
                list.map(project_float_expr_to_var, FloatExprs, FloatVars)
            ->
                FloatArrayTerm = tfzn_float_array_term_vars(FloatVars)
            ;
                list.map(project_float_expr_to_term, FloatExprs, FloatTerms)
            ->
                FloatArrayTerm = tfzn_float_array_term_terms(FloatTerms)
            ;
                fail
            )
        )
    ;
        FloatArrayExpr = array_var(_IndexRanges, VarId),
        VarName = var_name(VarId),
        FloatArrayVar = tfzn_float_array_var_named(VarName),
        FloatArrayTerm = tfzn_float_array_term_var(FloatArrayVar)
    ).

%-----------------------------------------------------------------------------%

:- pred convert_string_expr_to_tfzn_term(mzn_expr::in, tfzn_string_term::out)
    is semidet.

convert_string_expr_to_tfzn_term(MZExpr, FloatTerm) :-
    MZExpr = mzn_expr(RawMZExpr, MZAnns),
    set.empty(MZAnns),
    RawMZExpr = string_expr(MZFloatExpr),
    MZFloatExpr = string_const(FloatConst),
    FloatTerm = tfzn_string_term_const(FloatConst).

%-----------------------------------------------------------------------------%

:- pred project_bool_expr_to_const(bool_expr::in, bool::out) is semidet.

project_bool_expr_to_const(bool_const(Bool), Bool).

:- pred project_int_expr_to_const(int_expr::in, int::out) is semidet.

project_int_expr_to_const(int_const(Int), Int).

:- pred project_int_set_expr_to_const(int_set_expr::in, set(int)::out)
    is semidet.

project_int_set_expr_to_const(set_items(IntSet), IntSet).

:- pred project_float_expr_to_const(float_expr::in, float::out) is semidet.

project_float_expr_to_const(float_const(Float), Float).

%-----------------------------------------------------------------------------%

:- pred project_bool_expr_to_var(bool_expr::in, tfzn_bool_var::out) is semidet.

project_bool_expr_to_var(bool_var(var_no_index(VarId)), Var) :-
    VarName = var_name(VarId),
    Var = tfzn_bool_var_named(VarName).
project_bool_expr_to_var(bool_var(var_index(VarId, Index)), Var) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_bool_array_var_named(VarName),
    Var = tfzn_bool_var_array_slot(ArrayVar, Index).

:- pred project_int_expr_to_var(int_expr::in, tfzn_int_var::out) is semidet.

project_int_expr_to_var(int_var(var_no_index(VarId)), Var) :-
    VarName = var_name(VarId),
    Var = tfzn_int_var_named(VarName).
project_int_expr_to_var(int_var(var_index(VarId, Index)), Var) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_int_array_var_named(VarName),
    Var = tfzn_int_var_array_slot(ArrayVar, Index).

:- pred project_int_set_expr_to_var(int_set_expr::in, tfzn_int_set_var::out)
    is semidet.

project_int_set_expr_to_var(set_var(var_no_index(VarId)), Var) :-
    VarName = var_name(VarId),
    Var = tfzn_int_set_var_named(VarName).
project_int_set_expr_to_var(set_var(var_index(VarId, Index)), Var) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_int_set_array_var_named(VarName),
    Var = tfzn_int_set_var_array_slot(ArrayVar, Index).

:- pred project_float_expr_to_var(float_expr::in, tfzn_float_var::out)
    is semidet.

project_float_expr_to_var(float_var(var_no_index(VarId)), Var) :-
    VarName = var_name(VarId),
    Var = tfzn_float_var_named(VarName).
project_float_expr_to_var(float_var(var_index(VarId, Index)), Var) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_float_array_var_named(VarName),
    Var = tfzn_float_var_array_slot(ArrayVar, Index).

%-----------------------------------------------------------------------------%

:- pred project_bool_expr_to_term(bool_expr::in, tfzn_bool_term::out)
    is semidet.

project_bool_expr_to_term(bool_const(Bool), Term) :-
    Term = tfzn_bool_term_const(Bool).
project_bool_expr_to_term(bool_var(var_no_index(VarId)), Term) :-
    VarName = var_name(VarId),
    Var = tfzn_bool_var_named(VarName),
    Term = tfzn_bool_term_var(Var).
project_bool_expr_to_term(bool_var(var_index(VarId, Index)), Term) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_bool_array_var_named(VarName),
    Var = tfzn_bool_var_array_slot(ArrayVar, Index),
    Term = tfzn_bool_term_var(Var).

:- pred project_int_expr_to_term(int_expr::in, tfzn_int_term::out) is semidet.

project_int_expr_to_term(int_const(Int), Term) :-
    Term = tfzn_int_term_const(Int).
project_int_expr_to_term(int_var(var_no_index(VarId)), Term) :-
    VarName = var_name(VarId),
    Var = tfzn_int_var_named(VarName),
    Term = tfzn_int_term_var(Var).
project_int_expr_to_term(int_var(var_index(VarId, Index)), Term) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_int_array_var_named(VarName),
    Var = tfzn_int_var_array_slot(ArrayVar, Index),
    Term = tfzn_int_term_var(Var).

:- pred project_int_set_expr_to_term(int_set_expr::in, tfzn_int_set_term::out)
    is det.

project_int_set_expr_to_term(set_items(IntSet), Term) :-
    Term = tfzn_int_set_term_const(IntSet).
project_int_set_expr_to_term(set_var(var_no_index(VarId)), Term) :-
    VarName = var_name(VarId),
    Var = tfzn_int_set_var_named(VarName),
    Term = tfzn_int_set_term_var(Var).
project_int_set_expr_to_term(set_var(var_index(VarId, Index)), Term) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_int_set_array_var_named(VarName),
    Var = tfzn_int_set_var_array_slot(ArrayVar, Index),
    Term = tfzn_int_set_term_var(Var).

:- pred project_float_expr_to_term(float_expr::in, tfzn_float_term::out)
    is semidet.

project_float_expr_to_term(float_const(Float), Term) :-
    Term = tfzn_float_term_const(Float).
project_float_expr_to_term(float_var(var_no_index(VarId)), Term) :-
    VarName = var_name(VarId),
    Var = tfzn_float_var_named(VarName),
    Term = tfzn_float_term_var(Var).
project_float_expr_to_term(float_var(var_index(VarId, Index)), Term) :-
    VarName = var_name(VarId),
    ArrayVar = tfzn_float_array_var_named(VarName),
    Var = tfzn_float_var_array_slot(ArrayVar, Index),
    Term = tfzn_float_term_var(Var).

%-----------------------------------------------------------------------------%
%-----------------------------------------------------------------------------%

:- pred convert_solve_kind(mzn_solve_kind::in, tfzn_solve_kind::out)
    is semidet.

convert_solve_kind(MZKind, Kind) :-
    (
        MZKind = mzn_solve_satisfy,
        Kind = tfzn_sk_satisfy
    ;
        MZKind = mzn_solve_minimize(MZExpr),
        MZExpr = mzn_expr(RawMZExpr, MZAnns),
        set.empty(MZAnns),
        ( if
            RawMZExpr = int_expr(MZIntExpr),
            project_int_expr_to_term(MZIntExpr, IntTerm)
        then
            Kind = tfzn_sk_minimize_int(IntTerm)
        else if
            RawMZExpr = float_expr(MZFloatExpr),
            project_float_expr_to_term(MZFloatExpr, FloatTerm)
        then
            Kind = tfzn_sk_minimize_float(FloatTerm)
        else
            fail
        )
    ;
        MZKind = mzn_solve_maximize(MZExpr),
        MZExpr = mzn_expr(RawMZExpr, MZAnns),
        set.empty(MZAnns),
        ( if
            RawMZExpr = int_expr(MZIntExpr),
            project_int_expr_to_term(MZIntExpr, IntTerm)
        then
            Kind = tfzn_sk_maximize_int(IntTerm)
        else if
            RawMZExpr = float_expr(MZFloatExpr),
            project_float_expr_to_term(MZFloatExpr, FloatTerm)
        then
            Kind = tfzn_sk_maximize_float(FloatTerm)
        else
            fail
        )
    ).

%-----------------------------------------------------------------------------%

:- pred verify_index_range_size(list(index_range)::in, array(T)::in, int::out)
    is semidet.

verify_index_range_size(ArrayIndexRanges, Array, ArraySize) :-
    ArraySize = array.size(Array),
    IndexRangeSize = index_ranges_to_size(ArrayIndexRanges),
    ArraySize = IndexRangeSize.

:- pred verify_index_range_array(list(index_range)::in, array(T)::in, int::out)
    is semidet.

verify_index_range_array([index_range(LB, UB)], Array, ArraySize) :-
    array.size(Array, ArraySize),
    LB = 1,
    UB = ArraySize.

:- pred verify_index_range_list(list(index_range)::in, list(T)::in, int::out)
    is semidet.

verify_index_range_list([index_range(LB, UB)], List, Length) :-
    list.length(List, Length),
    LB = 1,
    UB = Length.

%-----------------------------------------------------------------------------%
